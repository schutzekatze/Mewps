
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .data         0000001c  00800100  00000bb6  00000c4a  2**0  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bb6  00000000  00000000  00000094  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a6  0080011c  0080011c  00000c66  2**0  ALLOC
  3 .stab         0000420c  00000000  00000000  00000c68  2**2  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000039a1  00000000  00000000  00004e74  2**0  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00008815  2**0  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008828  2**2  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00008868  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00008e5c  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  000093fe  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  0000941b  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00800100 l    d  .data	00000000 .data
00000000 l    d  .text	00000000 .text
0080011c l    d  .bss	00000000 .bss
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .note.gnu.avr.deviceinfo	00000000 .note.gnu.avr.deviceinfo
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 code.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800109 l     O .data	00000001 ACKNOWLEDGE
00800108 l     O .data	00000001 NEGATIVE_ACKNOWLEDGE
00800100 l     O .data	00000008 MOTOR_PINS
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 wiring_digital.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000004d8 l     F .text	00000052 turnOffPWM
00000000 l    df *ABS*	00000000 HardwareSerial0.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000772 l     F .text	0000005a _GLOBAL__sub_I___vector_18
00000000 l    df *ABS*	00000000 _clear_bss.o
000000e6 l       .text	00000000 .do_clear_bss_start
000000e4 l       .text	00000000 .do_clear_bss_loop
00000000 l    df *ABS*	00000000 wiring.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0080011c l     O .bss	00000001 timer0_fract
00000000 l    df *ABS*	00000000 wiring_analog.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 Print.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 main.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _udivmodsi4.o
00000b88 l       .text	00000000 __udivmodsi4_ep
00000b6e l       .text	00000000 __udivmodsi4_loop
00000000 l    df *ABS*	00000000 _exit.o
00000bb4 l       .text	00000000 __stop_program
00000104  w      .text	00000000 __vector_22
00800121 g     O .bss	00000004 timer0_overflow_count
000000ae g     O .text	0000000a port_to_mode_PGM
00000104  w      .text	00000000 __vector_1
00000228 g     F .text	00000092 serial_comm_receive()
0000ffa0 g       *ABS*	00000000 __DATA_REGION_LENGTH__
0080011d g     O .bss	00000004 timer0_millis
0000084c g     F .text	0000001c HardwareSerial::peek()
000007cc g     F .text	00000052 Print::write(unsigned char const*, unsigned int)
00000068 g       .text	00000000 __trampolines_start
00000b1a g     F .text	00000048 __fp_cmp
00000bb6 g       .text	00000000 _etext
00000834 g     F .text	00000018 HardwareSerial::available()
00000104  w      .text	00000000 __vector_24
000002ba g     F .text	00000114 loop
000008ca g     F .text	00000042 HardwareSerial::_tx_udr_empty_irq()
00000104  w      .text	00000000 __vector_12
0000081e  w    F .text	00000002 initVariant
0000094e g     F .text	0000008c HardwareSerial::write(unsigned char)
00000104 g       .text	00000000 __bad_interrupt
00000bd2 g       *ABS*	00000000 __data_load_end
000005fc g     F .text	000000b6 analogWrite
00000104  w      .text	00000000 __vector_6
00000a98 g       .text	00000000 __lesf2
00000068 g       .text	00000000 __trampolines_end
00000104  w      .text	00000000 __vector_3
000005a2 g     F .text	0000005a digitalWrite
0000052a g     F .text	00000078 pinMode
00000a98 g       .text	00000000 __nesf2
00000090 g     O .text	00000014 digital_pin_to_port_PGM
00000104  w      .text	00000000 __vector_23
00000bb6 g       *ABS*	00000000 __data_load_start
000000ba g       .text	00000000 __dtors_end
008001c2 g       .bss	00000000 __bss_end
00000146 g     F .text	000000e2 serial_comm_send(unsigned int)
00000400 g       *ABS*	00000000 __LOCK_REGION_LENGTH__
00000104  w      .text	00000000 __vector_25
00000104  w      .text	00000000 __vector_11
00000890 g     F .text	00000020 HardwareSerial::availableForWrite()
000000ba  w      .text	00000000 __init
000008b0  w    F .text	0000001a serialEventRun()
0000090c g     F .text	00000042 HardwareSerial::flush()
00000104  w      .text	00000000 __vector_13
00000104  w      .text	00000000 __vector_17
00000716 g     F .text	0000004a __vector_19
00000104  w      .text	00000000 __vector_7
00800125 g     O .bss	0000009d Serial
0080010a  w    O .data	00000012 vtable for HardwareSerial
000000dc g       .text	00000010 .hidden __do_clear_bss
00000760 g     F .text	00000012 Serial0_available()
00810000 g       .stab	00000000 __eeprom_end
0000007c g     O .text	00000014 digital_pin_to_bit_mask_PGM
000009da g     F .text	000000be HardwareSerial::begin(unsigned long, unsigned char)
00000aa4 g       .text	00000000 __floatsisf
00000000 g       .text	00000000 __vectors
0080011c g       .data	00000000 __data_end
00000a98 g       .text	00000000 __eqsf2
00000000  w      .text	00000000 __vector_default
00000104  w      .text	00000000 __vector_5
00000400 g       *ABS*	00000000 __SIGNATURE_REGION_LENGTH__
00000ba6 g       .text	0000000c .hidden __tablejump2__
00000462 g     F .text	00000076 init
000000b8 g       .text	00000000 __ctors_start
000000c6 g       .text	00000016 .hidden __do_copy_data
00000a98 g     F .text	00000008 __cmpsf2
0080011c g       .bss	00000000 __bss_start
00000820 g     F .text	00000014 main
00000a98 g       .text	00000000 __ltsf2
00000104  w      .text	00000000 __vector_4
00000000  w      *ABS*	00000000 __heap_end
00000104  w      .text	00000000 __vector_9
00000104  w      .text	00000000 __vector_2
00000400 g       *ABS*	00000000 __USER_SIGNATURE_REGION_LENGTH__
00000104  w      .text	00000000 __vector_21
00000104  w      .text	00000000 __vector_15
000000a4 g     O .text	0000000a port_to_output_PGM
00000106 g     F .text	00000040 setup
000000ba g       .text	00000000 __dtors_start
000000ba g       .text	00000000 __ctors_end
000008ff  w      *ABS*	00000000 __stack
0080011c g       .data	00000000 _edata
008001c2 g       .stab	00000000 _end
00000104  w      .text	00000000 __vector_8
00000068 g     O .text	00000014 digital_pin_to_timer_PGM
00000bb2  w      .text	00000000 .hidden exit
00000aa0 g     F .text	0000007a __floatunsisf
00000868 g     F .text	00000028 HardwareSerial::read()
00000b62 g       .text	00000044 .hidden __udivmodsi4
00010000 g       *ABS*	00000000 __EEPROM_REGION_LENGTH__
00000bb2 g       .text	00000000 .hidden _exit
00000104  w      .text	00000000 __vector_14
00000104  w      .text	00000000 __vector_10
000003ce g     F .text	00000094 __vector_16
00800100 g       .data	00000000 __data_start
000006b2 g     F .text	00000064 __vector_18
00000400 g       *ABS*	00000000 __FUSE_REGION_LENGTH__
00020000 g       *ABS*	00000000 __TEXT_REGION_LENGTH__
00000104  w      .text	00000000 __vector_20
000000ec g       .text	00000014 .hidden __do_global_ctors



Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	5c c0       	rjmp	.+184    	; 0xba <__ctors_end>
   2:	00 00       	nop
   4:	7f c0       	rjmp	.+254    	; 0x104 <__bad_interrupt>
   6:	00 00       	nop
   8:	7d c0       	rjmp	.+250    	; 0x104 <__bad_interrupt>
   a:	00 00       	nop
   c:	7b c0       	rjmp	.+246    	; 0x104 <__bad_interrupt>
   e:	00 00       	nop
  10:	79 c0       	rjmp	.+242    	; 0x104 <__bad_interrupt>
  12:	00 00       	nop
  14:	77 c0       	rjmp	.+238    	; 0x104 <__bad_interrupt>
  16:	00 00       	nop
  18:	75 c0       	rjmp	.+234    	; 0x104 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	73 c0       	rjmp	.+230    	; 0x104 <__bad_interrupt>
  1e:	00 00       	nop
  20:	71 c0       	rjmp	.+226    	; 0x104 <__bad_interrupt>
  22:	00 00       	nop
  24:	6f c0       	rjmp	.+222    	; 0x104 <__bad_interrupt>
  26:	00 00       	nop
  28:	6d c0       	rjmp	.+218    	; 0x104 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6b c0       	rjmp	.+214    	; 0x104 <__bad_interrupt>
  2e:	00 00       	nop
  30:	69 c0       	rjmp	.+210    	; 0x104 <__bad_interrupt>
  32:	00 00       	nop
  34:	67 c0       	rjmp	.+206    	; 0x104 <__bad_interrupt>
  36:	00 00       	nop
  38:	65 c0       	rjmp	.+202    	; 0x104 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	63 c0       	rjmp	.+198    	; 0x104 <__bad_interrupt>
  3e:	00 00       	nop
  40:	c6 c1       	rjmp	.+908    	; 0x3ce <__vector_16>
  42:	00 00       	nop
  44:	5f c0       	rjmp	.+190    	; 0x104 <__bad_interrupt>
  46:	00 00       	nop
  48:	34 c3       	rjmp	.+1640   	; 0x6b2 <__vector_18>
  4a:	00 00       	nop
  4c:	64 c3       	rjmp	.+1736   	; 0x716 <__vector_19>
  4e:	00 00       	nop
  50:	59 c0       	rjmp	.+178    	; 0x104 <__bad_interrupt>
  52:	00 00       	nop
  54:	57 c0       	rjmp	.+174    	; 0x104 <__bad_interrupt>
  56:	00 00       	nop
  58:	55 c0       	rjmp	.+170    	; 0x104 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	53 c0       	rjmp	.+166    	; 0x104 <__bad_interrupt>
  5e:	00 00       	nop
  60:	51 c0       	rjmp	.+162    	; 0x104 <__bad_interrupt>
  62:	00 00       	nop
  64:	4f c0       	rjmp	.+158    	; 0x104 <__bad_interrupt>
	...

00000068 <digital_pin_to_timer_PGM>:
__trampolines_start():
  68:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
  78:	00 00 00 00                                         ....

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
__ctors_start():
  b8:	b9 03       	fmulsu	r19, r17

000000ba <__ctors_end>:
__dtors_end():
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d8 e0       	ldi	r29, 0x08	; 8
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
__do_copy_data():
  c6:	11 e0       	ldi	r17, 0x01	; 1
  c8:	a0 e0       	ldi	r26, 0x00	; 0
  ca:	b1 e0       	ldi	r27, 0x01	; 1
  cc:	e6 eb       	ldi	r30, 0xB6	; 182
  ce:	fb e0       	ldi	r31, 0x0B	; 11
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
  d2:	05 90       	lpm	r0, Z+
  d4:	0d 92       	st	X+, r0
  d6:	ac 31       	cpi	r26, 0x1C	; 28
  d8:	b1 07       	cpc	r27, r17
  da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
__do_clear_bss():
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	ac e1       	ldi	r26, 0x1C	; 28
  e0:	b1 e0       	ldi	r27, 0x01	; 1
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
  e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
  e6:	a2 3c       	cpi	r26, 0xC2	; 194
  e8:	b2 07       	cpc	r27, r18
  ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>

000000ec <__do_global_ctors>:
__do_global_ctors():
  ec:	10 e0       	ldi	r17, 0x00	; 0
  ee:	cd e5       	ldi	r28, 0x5D	; 93
  f0:	d0 e0       	ldi	r29, 0x00	; 0
  f2:	03 c0       	rjmp	.+6      	; 0xfa <__do_global_ctors+0xe>
  f4:	21 97       	sbiw	r28, 0x01	; 1
  f6:	fe 01       	movw	r30, r28
  f8:	56 d5       	rcall	.+2732   	; 0xba6 <__tablejump2__>
  fa:	cc 35       	cpi	r28, 0x5C	; 92
  fc:	d1 07       	cpc	r29, r17
  fe:	d1 f7       	brne	.-12     	; 0xf4 <__do_global_ctors+0x8>
 100:	8f d3       	rcall	.+1822   	; 0x820 <main>
 102:	57 c5       	rjmp	.+2734   	; 0xbb2 <_exit>

00000104 <__bad_interrupt>:
__vector_22():
 104:	7d cf       	rjmp	.-262    	; 0x0 <__vectors>

00000106 <setup>:
setup():
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:136
{
    unsigned pin;
    
    for (pin = 0; pin < sizeof(ENABLE_PINS) / sizeof(unsigned); pin++)
    {
        pinMode(ENABLE_PINS[pin], OUTPUT);
 106:	61 e0       	ldi	r22, 0x01	; 1
 108:	84 e0       	ldi	r24, 0x04	; 4
 10a:	0f d2       	rcall	.+1054   	; 0x52a <pinMode>
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:137
        digitalWrite(ENABLE_PINS[pin], HIGH);
 10c:	61 e0       	ldi	r22, 0x01	; 1
 10e:	84 e0       	ldi	r24, 0x04	; 4
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:136
        pinMode(ENABLE_PINS[pin], OUTPUT);
 110:	48 d2       	rcall	.+1168   	; 0x5a2 <digitalWrite>
 112:	61 e0       	ldi	r22, 0x01	; 1
 114:	88 e0       	ldi	r24, 0x08	; 8
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:137
        digitalWrite(ENABLE_PINS[pin], HIGH);
 116:	09 d2       	rcall	.+1042   	; 0x52a <pinMode>
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	88 e0       	ldi	r24, 0x08	; 8
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:142
    }

    for (pin = 0; pin < sizeof(MOTOR_PINS) / sizeof(unsigned); pin++)
    {
        pinMode(MOTOR_PINS[pin], OUTPUT);
 11c:	42 d2       	rcall	.+1156   	; 0x5a2 <digitalWrite>
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	85 e0       	ldi	r24, 0x05	; 5
 122:	03 d2       	rcall	.+1030   	; 0x52a <pinMode>
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	86 e0       	ldi	r24, 0x06	; 6
 128:	00 d2       	rcall	.+1024   	; 0x52a <pinMode>
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	89 e0       	ldi	r24, 0x09	; 9
 12e:	fd d1       	rcall	.+1018   	; 0x52a <pinMode>
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	8a e0       	ldi	r24, 0x0A	; 10
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:121
    *ay = 0;
 134:	fa d1       	rcall	.+1012   	; 0x52a <pinMode>
 136:	26 e0       	ldi	r18, 0x06	; 6
 138:	40 e8       	ldi	r20, 0x80	; 128
 13a:	55 e2       	ldi	r21, 0x25	; 37
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	85 e2       	ldi	r24, 0x25	; 37
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	4a c4       	rjmp	.+2196   	; 0x9da <HardwareSerial::begin(unsigned long, unsigned char)>

00000146 <serial_comm_send(unsigned int)>:
_Z16serial_comm_sendj():
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:18
{
 146:	8f 92       	push	r8
 148:	9f 92       	push	r9
 14a:	af 92       	push	r10
 14c:	bf 92       	push	r11
 14e:	cf 92       	push	r12
 150:	df 92       	push	r13
 152:	ef 92       	push	r14
 154:	ff 92       	push	r15
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	00 d0       	rcall	.+0      	; 0x160 <serial_comm_send(unsigned int)+0x1a>
 160:	1f 92       	push	r1
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:19
    uint16_t network_msg = ((msg << 8) & 0xff00) | ((msg >> 8) & 0x00ff);
 166:	98 27       	eor	r25, r24
 168:	89 27       	eor	r24, r25
 16a:	98 27       	eor	r25, r24
 16c:	9a 83       	std	Y+2, r25	; 0x02
 16e:	89 83       	std	Y+1, r24	; 0x01
 170:	83 e0       	ldi	r24, 0x03	; 3
 172:	e8 2e       	mov	r14, r24
 174:	f1 2c       	mov	r15, r1
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:29
            bytes += Serial.write((const uint8_t*)&network_msg + bytes, sizeof(network_msg) - bytes);
 176:	92 e0       	ldi	r25, 0x02	; 2
 178:	c9 2e       	mov	r12, r25
 17a:	d1 2c       	mov	r13, r1
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:19
    uint16_t network_msg = ((msg << 8) & 0xff00) | ((msg >> 8) & 0x00ff);
 17c:	00 e0       	ldi	r16, 0x00	; 0
 17e:	10 e0       	ldi	r17, 0x00	; 0
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:29
            bytes += Serial.write((const uint8_t*)&network_msg + bytes, sizeof(network_msg) - bytes);
 180:	a6 01       	movw	r20, r12
 182:	40 1b       	sub	r20, r16
 184:	51 0b       	sbc	r21, r17
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	6c 0f       	add	r22, r28
 18c:	7d 1f       	adc	r23, r29
 18e:	60 0f       	add	r22, r16
 190:	71 1f       	adc	r23, r17
 192:	85 e2       	ldi	r24, 0x25	; 37
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	1a d3       	rcall	.+1588   	; 0x7cc <Print::write(unsigned char const*, unsigned int)>
 198:	08 0f       	add	r16, r24
 19a:	19 1f       	adc	r17, r25
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:27
        while (bytes < sizeof(network_msg))
 19c:	02 30       	cpi	r16, 0x02	; 2
 19e:	11 05       	cpc	r17, r1
 1a0:	78 f3       	brcs	.-34     	; 0x180 <serial_comm_send(unsigned int)+0x3a>
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:32
        checksum = (network_msg & 0x00ff) + (network_msg >> 8 & 0x00ff);
 1a2:	99 81       	ldd	r25, Y+1	; 0x01
 1a4:	8a 81       	ldd	r24, Y+2	; 0x02
 1a6:	89 0f       	add	r24, r25
 1a8:	8b 83       	std	Y+3, r24	; 0x03
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:33
        Serial.write(&checksum, sizeof(checksum));
 1aa:	41 e0       	ldi	r20, 0x01	; 1
 1ac:	50 e0       	ldi	r21, 0x00	; 0
 1ae:	be 01       	movw	r22, r28
 1b0:	6d 5f       	subi	r22, 0xFD	; 253
 1b2:	7f 4f       	sbci	r23, 0xFF	; 255
 1b4:	85 e2       	ldi	r24, 0x25	; 37
 1b6:	91 e0       	ldi	r25, 0x01	; 1
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:35
        while (Serial.available() == 0);
 1b8:	09 d3       	rcall	.+1554   	; 0x7cc <Print::write(unsigned char const*, unsigned int)>
 1ba:	85 e2       	ldi	r24, 0x25	; 37
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	3a d3       	rcall	.+1652   	; 0x834 <HardwareSerial::available()>
 1c0:	89 2b       	or	r24, r25
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:36
        response = Serial.read();
 1c2:	d9 f3       	breq	.-10     	; 0x1ba <serial_comm_send(unsigned int)+0x74>
 1c4:	85 e2       	ldi	r24, 0x25	; 37
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	4f d3       	rcall	.+1694   	; 0x868 <HardwareSerial::read()>
 1ca:	8c 01       	movw	r16, r24
 1cc:	11 27       	eor	r17, r17
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:38
        if (fabs((int)response - ACKNOWLEDGE) < fabs((int)response - NEGATIVE_ACKNOWLEDGE))
 1ce:	b8 01       	movw	r22, r16
 1d0:	6f 5f       	subi	r22, 0xFF	; 255
 1d2:	71 09       	sbc	r23, r1
 1d4:	07 2e       	mov	r0, r23
 1d6:	00 0c       	add	r0, r0
 1d8:	88 0b       	sbc	r24, r24
 1da:	99 0b       	sbc	r25, r25
 1dc:	63 d4       	rcall	.+2246   	; 0xaa4 <__floatsisf>
 1de:	4b 01       	movw	r8, r22
 1e0:	5c 01       	movw	r10, r24
 1e2:	e8 94       	clt
 1e4:	b7 f8       	bld	r11, 7
 1e6:	b8 01       	movw	r22, r16
 1e8:	11 0f       	add	r17, r17
 1ea:	88 0b       	sbc	r24, r24
 1ec:	99 0b       	sbc	r25, r25
 1ee:	5a d4       	rcall	.+2228   	; 0xaa4 <__floatsisf>
 1f0:	9b 01       	movw	r18, r22
 1f2:	ac 01       	movw	r20, r24
 1f4:	c5 01       	movw	r24, r10
 1f6:	b4 01       	movw	r22, r8
 1f8:	4f d4       	rcall	.+2206   	; 0xa98 <__cmpsf2>
 1fa:	87 fd       	sbrc	r24, 7
 1fc:	05 c0       	rjmp	.+10     	; 0x208 <serial_comm_send(unsigned int)+0xc2>
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	e8 1a       	sub	r14, r24
 202:	f1 08       	sbc	r15, r1
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:24
    for(i = 0; i < ATTEMPTS_BEFORE_ABORT; i++)
 204:	09 f0       	breq	.+2      	; 0x208 <serial_comm_send(unsigned int)+0xc2>
 206:	ba cf       	rjmp	.-140    	; 0x17c <serial_comm_send(unsigned int)+0x36>
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:43
}
 208:	0f 90       	pop	r0
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	0f 91       	pop	r16
 216:	ff 90       	pop	r15
 218:	ef 90       	pop	r14
 21a:	df 90       	pop	r13
 21c:	cf 90       	pop	r12
 21e:	bf 90       	pop	r11
 220:	af 90       	pop	r10
 222:	9f 90       	pop	r9
 224:	8f 90       	pop	r8
 226:	08 95       	ret

00000228 <serial_comm_receive()>:
_Z19serial_comm_receivev():
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:46
{
 228:	ef 92       	push	r14
 22a:	ff 92       	push	r15
 22c:	0f 93       	push	r16
 22e:	1f 93       	push	r17
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	00 d0       	rcall	.+0      	; 0x236 <serial_comm_receive()+0xe>
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
 23a:	83 e0       	ldi	r24, 0x03	; 3
 23c:	e8 2e       	mov	r14, r24
 23e:	f1 2c       	mov	r15, r1
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:56
            while (Serial.available() == 0);
 240:	85 e2       	ldi	r24, 0x25	; 37
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	f7 d2       	rcall	.+1518   	; 0x834 <HardwareSerial::available()>
 246:	89 2b       	or	r24, r25
 248:	d9 f3       	breq	.-10     	; 0x240 <serial_comm_receive()+0x18>
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:58
            *byte = Serial.read();
 24a:	85 e2       	ldi	r24, 0x25	; 37
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	0c d3       	rcall	.+1560   	; 0x868 <HardwareSerial::read()>
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:56
            while (Serial.available() == 0);
 250:	89 83       	std	Y+1, r24	; 0x01
 252:	85 e2       	ldi	r24, 0x25	; 37
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	ee d2       	rcall	.+1500   	; 0x834 <HardwareSerial::available()>
 258:	89 2b       	or	r24, r25
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:58
            *byte = Serial.read();
 25a:	d9 f3       	breq	.-10     	; 0x252 <serial_comm_receive()+0x2a>
 25c:	85 e2       	ldi	r24, 0x25	; 37
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	03 d3       	rcall	.+1542   	; 0x868 <HardwareSerial::read()>
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:62
        while (Serial.available() == 0);
 262:	8a 83       	std	Y+2, r24	; 0x02
 264:	85 e2       	ldi	r24, 0x25	; 37
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	e5 d2       	rcall	.+1482   	; 0x834 <HardwareSerial::available()>
 26a:	89 2b       	or	r24, r25
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:63
        checksum = Serial.read();
 26c:	d9 f3       	breq	.-10     	; 0x264 <serial_comm_receive()+0x3c>
 26e:	85 e2       	ldi	r24, 0x25	; 37
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	fa d2       	rcall	.+1524   	; 0x868 <HardwareSerial::read()>
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:65
        if ((uint8_t)((network_msg & 0x00ff) + (network_msg >> 8 & 0x00ff)) == checksum)
 274:	09 81       	ldd	r16, Y+1	; 0x01
 276:	1a 81       	ldd	r17, Y+2	; 0x02
 278:	91 2f       	mov	r25, r17
 27a:	90 0f       	add	r25, r16
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:67
            Serial.write((const uint8_t*)&ACKNOWLEDGE, sizeof(ACKNOWLEDGE));
 27c:	41 e0       	ldi	r20, 0x01	; 1
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:65
        if ((uint8_t)((network_msg & 0x00ff) + (network_msg >> 8 & 0x00ff)) == checksum)
 27e:	50 e0       	ldi	r21, 0x00	; 0
 280:	98 13       	cpse	r25, r24
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:67
            Serial.write((const uint8_t*)&ACKNOWLEDGE, sizeof(ACKNOWLEDGE));
 282:	10 c0       	rjmp	.+32     	; 0x2a4 <serial_comm_receive()+0x7c>
 284:	69 e0       	ldi	r22, 0x09	; 9
 286:	71 e0       	ldi	r23, 0x01	; 1
 288:	85 e2       	ldi	r24, 0x25	; 37
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	9f d2       	rcall	.+1342   	; 0x7cc <Print::write(unsigned char const*, unsigned int)>
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:78
}
 28e:	90 2f       	mov	r25, r16
 290:	81 2f       	mov	r24, r17
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	0f 91       	pop	r16
 29e:	ff 90       	pop	r15
 2a0:	ef 90       	pop	r14
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:73
            Serial.write((const uint8_t*)&NEGATIVE_ACKNOWLEDGE, sizeof(NEGATIVE_ACKNOWLEDGE));
 2a2:	08 95       	ret
 2a4:	68 e0       	ldi	r22, 0x08	; 8
 2a6:	71 e0       	ldi	r23, 0x01	; 1
 2a8:	85 e2       	ldi	r24, 0x25	; 37
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	8f d2       	rcall	.+1310   	; 0x7cc <Print::write(unsigned char const*, unsigned int)>
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	e8 1a       	sub	r14, r24
 2b2:	f1 08       	sbc	r15, r1
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:51
    for(i = 0; i < ATTEMPTS_BEFORE_ABORT; i++)
 2b4:	09 f0       	breq	.+2      	; 0x2b8 <serial_comm_receive()+0x90>
 2b6:	c4 cf       	rjmp	.-120    	; 0x240 <serial_comm_receive()+0x18>
 2b8:	ea cf       	rjmp	.-44     	; 0x28e <serial_comm_receive()+0x66>

000002ba <loop>:
loop():
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:149

    Serial.begin(BAUD_RATE);
}

void loop()
{
 2ba:	cf 92       	push	r12
 2bc:	df 92       	push	r13
 2be:	ef 92       	push	r14
 2c0:	ff 92       	push	r15
 2c2:	0f 93       	push	r16
 2c4:	1f 93       	push	r17
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	cd b7       	in	r28, 0x3d	; 61
 2cc:	de b7       	in	r29, 0x3e	; 62
 2ce:	28 97       	sbiw	r28, 0x08	; 8
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	f8 94       	cli
 2d4:	de bf       	out	0x3e, r29	; 62
 2d6:	0f be       	out	0x3f, r0	; 63
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:22
    
 2d8:	cd bf       	out	0x3d, r28	; 61
 2da:	a6 df       	rcall	.-180    	; 0x228 <serial_comm_receive()>
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:151
    int16_t preamble = receive_preamble();
    switch (preamble)
 2dc:	82 30       	cpi	r24, 0x02	; 2
 2de:	91 05       	cpc	r25, r1
 2e0:	d9 f0       	breq	.+54     	; 0x318 <loop+0x5e>
 2e2:	a0 f4       	brcc	.+40     	; 0x30c <loop+0x52>
 2e4:	00 97       	sbiw	r24, 0x00	; 0
 2e6:	09 f4       	brne	.+2      	; 0x2ea <loop+0x30>
 2e8:	6b c0       	rjmp	.+214    	; 0x3c0 <loop+0x106>
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	31 f1       	breq	.+76     	; 0x33a <loop+0x80>
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:204
            send_power_status(status);
        
            break;
        }
    }
}
 2ee:	28 96       	adiw	r28, 0x08	; 8
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	f8 94       	cli
 2f4:	de bf       	out	0x3e, r29	; 62
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	cd bf       	out	0x3d, r28	; 61
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	1f 91       	pop	r17
 300:	0f 91       	pop	r16
 302:	ff 90       	pop	r15
 304:	ef 90       	pop	r14
 306:	df 90       	pop	r13
 308:	cf 90       	pop	r12
 30a:	08 95       	ret
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:151
    switch (preamble)
 30c:	83 30       	cpi	r24, 0x03	; 3
 30e:	91 05       	cpc	r25, r1
 310:	09 f4       	brne	.+2      	; 0x314 <loop+0x5a>
 312:	56 c0       	rjmp	.+172    	; 0x3c0 <loop+0x106>
 314:	04 97       	sbiw	r24, 0x04	; 4
 316:	59 f7       	brne	.-42     	; 0x2ee <loop+0x34>
./../main-computer/infrastructure/peripherals/comm_protocol.h:87
    *status = serial_comm_receive();
}

inline void send_power_status(const int16_t status)
{
    serial_comm_send(status);
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	90 e0       	ldi	r25, 0x00	; 0
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:204
}
 31c:	28 96       	adiw	r28, 0x08	; 8
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	f8 94       	cli
 322:	de bf       	out	0x3e, r29	; 62
 324:	0f be       	out	0x3f, r0	; 63
 326:	cd bf       	out	0x3d, r28	; 61
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	1f 91       	pop	r17
 32e:	0f 91       	pop	r16
 330:	ff 90       	pop	r15
 332:	ef 90       	pop	r14
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:87
inline void set_motors_power(int16_t power_left, int16_t power_right)
 334:	df 90       	pop	r13
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:49
    
 336:	cf 90       	pop	r12
 338:	06 cf       	rjmp	.-500    	; 0x146 <serial_comm_send(unsigned int)>
 33a:	76 df       	rcall	.-276    	; 0x228 <serial_comm_receive()>
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:50
    unsigned i, j;
 33c:	8c 01       	movw	r16, r24
 33e:	74 df       	rcall	.-280    	; 0x228 <serial_comm_receive()>
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:89
    if (power_left < -255 || power_left > 255) return;
 340:	98 01       	movw	r18, r16
 342:	21 50       	subi	r18, 0x01	; 1
 344:	3f 4f       	sbci	r19, 0xFF	; 255
 346:	2f 3f       	cpi	r18, 0xFF	; 255
 348:	31 40       	sbci	r19, 0x01	; 1
 34a:	88 f6       	brcc	.-94     	; 0x2ee <loop+0x34>
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:90
    if (power_right < -255 || power_right > 255) return;
 34c:	9c 01       	movw	r18, r24
 34e:	21 50       	subi	r18, 0x01	; 1
 350:	3f 4f       	sbci	r19, 0xFF	; 255
 352:	2f 3f       	cpi	r18, 0xFF	; 255
 354:	31 40       	sbci	r19, 0x01	; 1
 356:	58 f6       	brcc	.-106    	; 0x2ee <loop+0x34>
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:92
    int16_t powers[] = { power_left, 0, power_right, 0 };
 358:	fe 01       	movw	r30, r28
 35a:	31 96       	adiw	r30, 0x01	; 1
 35c:	28 e0       	ldi	r18, 0x08	; 8
 35e:	df 01       	movw	r26, r30
 360:	1d 92       	st	X+, r1
 362:	2a 95       	dec	r18
 364:	e9 f7       	brne	.-6      	; 0x360 <loop+0xa6>
 366:	1a 83       	std	Y+2, r17	; 0x02
 368:	09 83       	std	Y+1, r16	; 0x01
 36a:	9e 83       	std	Y+6, r25	; 0x06
 36c:	8d 83       	std	Y+5, r24	; 0x05
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:94
    if (power_left < 0)
 36e:	17 ff       	sbrs	r17, 7
 370:	07 c0       	rjmp	.+14     	; 0x380 <loop+0xc6>
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:96
        powers[0] = 0;
 372:	1a 82       	std	Y+2, r1	; 0x02
 374:	19 82       	std	Y+1, r1	; 0x01
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:97
        powers[1] = -power_left;
 376:	11 95       	neg	r17
 378:	01 95       	neg	r16
 37a:	11 09       	sbc	r17, r1
 37c:	1c 83       	std	Y+4, r17	; 0x04
 37e:	0b 83       	std	Y+3, r16	; 0x03
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:100
    if (power_right < 0)
 380:	97 ff       	sbrs	r25, 7
 382:	07 c0       	rjmp	.+14     	; 0x392 <loop+0xd8>
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:102
        powers[2] = 0;
 384:	1e 82       	std	Y+6, r1	; 0x06
 386:	1d 82       	std	Y+5, r1	; 0x05
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:103
        powers[3] = -power_right;
 388:	91 95       	neg	r25
 38a:	81 95       	neg	r24
 38c:	91 09       	sbc	r25, r1
 38e:	98 87       	std	Y+8, r25	; 0x08
 390:	8f 83       	std	Y+7, r24	; 0x07
 392:	8f 01       	movw	r16, r30
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	e8 2e       	mov	r14, r24
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	f8 2e       	mov	r15, r24
 39c:	6e 01       	movw	r12, r28
 39e:	b9 e0       	ldi	r27, 0x09	; 9
 3a0:	cb 0e       	add	r12, r27
 3a2:	d1 1c       	adc	r13, r1
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:109
        analogWrite(MOTOR_PINS[i], powers[i]);
 3a4:	f8 01       	movw	r30, r16
 3a6:	61 91       	ld	r22, Z+
 3a8:	71 91       	ld	r23, Z+
 3aa:	8f 01       	movw	r16, r30
 3ac:	d7 01       	movw	r26, r14
 3ae:	8c 91       	ld	r24, X
 3b0:	b2 e0       	ldi	r27, 0x02	; 2
 3b2:	eb 0e       	add	r14, r27
 3b4:	f1 1c       	adc	r15, r1
 3b6:	22 d1       	rcall	.+580    	; 0x5fc <analogWrite>
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:107
    for(i = 0; i < sizeof(MOTOR_PINS) / sizeof(unsigned); i++)
 3b8:	c0 16       	cp	r12, r16
 3ba:	d1 06       	cpc	r13, r17
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:74
        }
 3bc:	99 f7       	brne	.-26     	; 0x3a4 <loop+0xea>
 3be:	97 cf       	rjmp	.-210    	; 0x2ee <loop+0x34>
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	90 e0       	ldi	r25, 0x00	; 0
/home/schutzekatze/projects/sokownik/bin/microcontroller/code.cpp:75
    }
 3c4:	c0 de       	rcall	.-640    	; 0x146 <serial_comm_send(unsigned int)>
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	bd de       	rcall	.-646    	; 0x146 <serial_comm_send(unsigned int)>
 3cc:	a5 cf       	rjmp	.-182    	; 0x318 <loop+0x5e>

000003ce <__vector_16>:
__vector_16():
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring.c:47
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 3ce:	1f 92       	push	r1
 3d0:	0f 92       	push	r0
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	0f 92       	push	r0
 3d6:	11 24       	eor	r1, r1
 3d8:	2f 93       	push	r18
 3da:	3f 93       	push	r19
 3dc:	8f 93       	push	r24
 3de:	9f 93       	push	r25
 3e0:	af 93       	push	r26
 3e2:	bf 93       	push	r27
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring.c:50
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 3e4:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <timer0_millis>
 3e8:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <timer0_millis+0x1>
 3ec:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <timer0_millis+0x2>
 3f0:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <timer0_millis+0x3>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring.c:51
	unsigned char f = timer0_fract;
 3f4:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <__data_end>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring.c:54

	m += MILLIS_INC;
	f += FRACT_INC;
 3f8:	23 e0       	ldi	r18, 0x03	; 3
 3fa:	23 0f       	add	r18, r19
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring.c:55
	if (f >= FRACT_MAX) {
 3fc:	2d 37       	cpi	r18, 0x7D	; 125
 3fe:	58 f5       	brcc	.+86     	; 0x456 <__FUSE_REGION_LENGTH__+0x56>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring.c:53
	m += MILLIS_INC;
 400:	01 96       	adiw	r24, 0x01	; 1
 402:	a1 1d       	adc	r26, r1
 404:	b1 1d       	adc	r27, r1
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring.c:60
		f -= FRACT_MAX;
		m += 1;
	}

	timer0_fract = f;
 406:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <__data_end>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring.c:61
	timer0_millis = m;
 40a:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <timer0_millis>
 40e:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <timer0_millis+0x1>
 412:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <timer0_millis+0x2>
 416:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <timer0_millis+0x3>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring.c:62
	timer0_overflow_count++;
 41a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <timer0_overflow_count>
 41e:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <timer0_overflow_count+0x1>
 422:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <timer0_overflow_count+0x2>
 426:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <timer0_overflow_count+0x3>
 42a:	01 96       	adiw	r24, 0x01	; 1
 42c:	a1 1d       	adc	r26, r1
 42e:	b1 1d       	adc	r27, r1
 430:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <timer0_overflow_count>
 434:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <timer0_overflow_count+0x1>
 438:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <timer0_overflow_count+0x2>
 43c:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <timer0_overflow_count+0x3>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring.c:63
}
 440:	bf 91       	pop	r27
 442:	af 91       	pop	r26
 444:	9f 91       	pop	r25
 446:	8f 91       	pop	r24
 448:	3f 91       	pop	r19
 44a:	2f 91       	pop	r18
 44c:	0f 90       	pop	r0
 44e:	0f be       	out	0x3f, r0	; 63
 450:	0f 90       	pop	r0
 452:	1f 90       	pop	r1
 454:	18 95       	reti
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring.c:56
		f -= FRACT_MAX;
 456:	26 e8       	ldi	r18, 0x86	; 134
 458:	23 0f       	add	r18, r19
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring.c:57
		m += 1;
 45a:	02 96       	adiw	r24, 0x02	; 2
 45c:	a1 1d       	adc	r26, r1
 45e:	b1 1d       	adc	r27, r1
 460:	d2 cf       	rjmp	.-92     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>

00000462 <init>:
init():
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring.c:245

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 462:	78 94       	sei
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring.c:251
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 464:	84 b5       	in	r24, 0x24	; 36
 466:	82 60       	ori	r24, 0x02	; 2
 468:	84 bd       	out	0x24, r24	; 36
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring.c:252
	sbi(TCCR0A, WGM00);
 46a:	84 b5       	in	r24, 0x24	; 36
 46c:	81 60       	ori	r24, 0x01	; 1
 46e:	84 bd       	out	0x24, r24	; 36
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring.c:265
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 470:	85 b5       	in	r24, 0x25	; 37
 472:	82 60       	ori	r24, 0x02	; 2
 474:	85 bd       	out	0x25, r24	; 37
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring.c:266
	sbi(TCCR0B, CS00);
 476:	85 b5       	in	r24, 0x25	; 37
 478:	81 60       	ori	r24, 0x01	; 1
 47a:	85 bd       	out	0x25, r24	; 37
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring.c:279

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 47c:	ee e6       	ldi	r30, 0x6E	; 110
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	80 81       	ld	r24, Z
 482:	81 60       	ori	r24, 0x01	; 1
 484:	80 83       	st	Z, r24
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring.c:290
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 486:	e1 e8       	ldi	r30, 0x81	; 129
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	10 82       	st	Z, r1
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring.c:293

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 48c:	80 81       	ld	r24, Z
 48e:	82 60       	ori	r24, 0x02	; 2
 490:	80 83       	st	Z, r24
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring.c:295
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 492:	80 81       	ld	r24, Z
 494:	81 60       	ori	r24, 0x01	; 1
 496:	80 83       	st	Z, r24
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring.c:305
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 498:	e0 e8       	ldi	r30, 0x80	; 128
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	80 81       	ld	r24, Z
 49e:	81 60       	ori	r24, 0x01	; 1
 4a0:	80 83       	st	Z, r24
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring.c:312

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 4a2:	e1 eb       	ldi	r30, 0xB1	; 177
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	80 81       	ld	r24, Z
 4a8:	84 60       	ori	r24, 0x04	; 4
 4aa:	80 83       	st	Z, r24
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring.c:321

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 4ac:	e0 eb       	ldi	r30, 0xB0	; 176
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	81 60       	ori	r24, 0x01	; 1
 4b4:	80 83       	st	Z, r24
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring.c:356
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 4b6:	ea e7       	ldi	r30, 0x7A	; 122
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	80 81       	ld	r24, Z
 4bc:	84 60       	ori	r24, 0x04	; 4
 4be:	80 83       	st	Z, r24
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring.c:357
		sbi(ADCSRA, ADPS1);
 4c0:	80 81       	ld	r24, Z
 4c2:	82 60       	ori	r24, 0x02	; 2
 4c4:	80 83       	st	Z, r24
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring.c:358
		sbi(ADCSRA, ADPS0);
 4c6:	80 81       	ld	r24, Z
 4c8:	81 60       	ori	r24, 0x01	; 1
 4ca:	80 83       	st	Z, r24
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring.c:381
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 4cc:	80 81       	ld	r24, Z
 4ce:	80 68       	ori	r24, 0x80	; 128
 4d0:	80 83       	st	Z, r24
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring.c:390
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 4d2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 4d6:	08 95       	ret

000004d8 <turnOffPWM>:
turnOffPWM():
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 4d8:	83 30       	cpi	r24, 0x03	; 3
 4da:	81 f0       	breq	.+32     	; 0x4fc <turnOffPWM+0x24>
 4dc:	28 f4       	brcc	.+10     	; 0x4e8 <turnOffPWM+0x10>
 4de:	81 30       	cpi	r24, 0x01	; 1
 4e0:	99 f0       	breq	.+38     	; 0x508 <turnOffPWM+0x30>
 4e2:	82 30       	cpi	r24, 0x02	; 2
 4e4:	a9 f0       	breq	.+42     	; 0x510 <turnOffPWM+0x38>
 4e6:	08 95       	ret
 4e8:	87 30       	cpi	r24, 0x07	; 7
 4ea:	a9 f0       	breq	.+42     	; 0x516 <turnOffPWM+0x3e>
 4ec:	88 30       	cpi	r24, 0x08	; 8
 4ee:	c9 f0       	breq	.+50     	; 0x522 <turnOffPWM+0x4a>
 4f0:	84 30       	cpi	r24, 0x04	; 4
 4f2:	b1 f4       	brne	.+44     	; 0x520 <turnOffPWM+0x48>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:83
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 4f4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 4f8:	8f 7d       	andi	r24, 0xDF	; 223
 4fa:	03 c0       	rjmp	.+6      	; 0x502 <turnOffPWM+0x2a>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:80
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 4fc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 500:	8f 77       	andi	r24, 0x7F	; 127
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:83
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 502:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 506:	08 95       	ret
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:94
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 508:	84 b5       	in	r24, 0x24	; 36
 50a:	8f 77       	andi	r24, 0x7F	; 127
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:98
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 50c:	84 bd       	out	0x24, r24	; 36
 50e:	08 95       	ret
 510:	84 b5       	in	r24, 0x24	; 36
 512:	8f 7d       	andi	r24, 0xDF	; 223
 514:	fb cf       	rjmp	.-10     	; 0x50c <turnOffPWM+0x34>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:101
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 516:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 51a:	8f 77       	andi	r24, 0x7F	; 127
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:104
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 51c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 520:	08 95       	ret
 522:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 526:	8f 7d       	andi	r24, 0xDF	; 223
 528:	f9 cf       	rjmp	.-14     	; 0x51c <turnOffPWM+0x44>

0000052a <pinMode>:
pinMode():
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:30
{
 52a:	cf 93       	push	r28
 52c:	df 93       	push	r29
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:31
	uint8_t bit = digitalPinToBitMask(pin);
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	fc 01       	movw	r30, r24
 532:	e4 58       	subi	r30, 0x84	; 132
 534:	ff 4f       	sbci	r31, 0xFF	; 255
 536:	24 91       	lpm	r18, Z
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:32
	uint8_t port = digitalPinToPort(pin);
 538:	80 57       	subi	r24, 0x70	; 112
 53a:	9f 4f       	sbci	r25, 0xFF	; 255
 53c:	fc 01       	movw	r30, r24
 53e:	84 91       	lpm	r24, Z
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:35
	if (port == NOT_A_PIN) return;
 540:	88 23       	and	r24, r24
 542:	c9 f0       	breq	.+50     	; 0x576 <pinMode+0x4c>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:38
	reg = portModeRegister(port);
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	fc 01       	movw	r30, r24
 54c:	e2 55       	subi	r30, 0x52	; 82
 54e:	ff 4f       	sbci	r31, 0xFF	; 255
 550:	a5 91       	lpm	r26, Z+
 552:	b4 91       	lpm	r27, Z
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:39
	out = portOutputRegister(port);
 554:	fc 01       	movw	r30, r24
 556:	ec 55       	subi	r30, 0x5C	; 92
 558:	ff 4f       	sbci	r31, 0xFF	; 255
 55a:	c5 91       	lpm	r28, Z+
 55c:	d4 91       	lpm	r29, Z
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:41
	if (mode == INPUT) { 
 55e:	61 11       	cpse	r22, r1
 560:	0d c0       	rjmp	.+26     	; 0x57c <pinMode+0x52>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:42
		uint8_t oldSREG = SREG;
 562:	9f b7       	in	r25, 0x3f	; 63
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:43
                cli();
 564:	f8 94       	cli
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:44
		*reg &= ~bit;
 566:	8c 91       	ld	r24, X
 568:	20 95       	com	r18
 56a:	82 23       	and	r24, r18
 56c:	8c 93       	st	X, r24
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:45
		*out &= ~bit;
 56e:	88 81       	ld	r24, Y
 570:	28 23       	and	r18, r24
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:51
		*out |= bit;
 572:	28 83       	st	Y, r18
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:52
		SREG = oldSREG;
 574:	9f bf       	out	0x3f, r25	; 63
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:59
}
 576:	df 91       	pop	r29
 578:	cf 91       	pop	r28
 57a:	08 95       	ret
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:47
	} else if (mode == INPUT_PULLUP) {
 57c:	62 30       	cpi	r22, 0x02	; 2
 57e:	51 f4       	brne	.+20     	; 0x594 <pinMode+0x6a>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:48
		uint8_t oldSREG = SREG;
 580:	9f b7       	in	r25, 0x3f	; 63
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:49
                cli();
 582:	f8 94       	cli
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:50
		*reg &= ~bit;
 584:	3c 91       	ld	r19, X
 586:	82 2f       	mov	r24, r18
 588:	80 95       	com	r24
 58a:	83 23       	and	r24, r19
 58c:	8c 93       	st	X, r24
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:51
		*out |= bit;
 58e:	e8 81       	ld	r30, Y
 590:	2e 2b       	or	r18, r30
 592:	ef cf       	rjmp	.-34     	; 0x572 <pinMode+0x48>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:54
		uint8_t oldSREG = SREG;
 594:	8f b7       	in	r24, 0x3f	; 63
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:55
                cli();
 596:	f8 94       	cli
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:56
		*reg |= bit;
 598:	ec 91       	ld	r30, X
 59a:	2e 2b       	or	r18, r30
 59c:	2c 93       	st	X, r18
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:57
		SREG = oldSREG;
 59e:	8f bf       	out	0x3f, r24	; 63
 5a0:	ea cf       	rjmp	.-44     	; 0x576 <pinMode+0x4c>

000005a2 <digitalWrite>:
digitalWrite():
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:139
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 5a2:	1f 93       	push	r17
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	16 2f       	mov	r17, r22
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:140
	uint8_t timer = digitalPinToTimer(pin);
 5aa:	28 2f       	mov	r18, r24
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	f9 01       	movw	r30, r18
 5b0:	e8 59       	subi	r30, 0x98	; 152
 5b2:	ff 4f       	sbci	r31, 0xFF	; 255
 5b4:	84 91       	lpm	r24, Z
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:141
	uint8_t bit = digitalPinToBitMask(pin);
 5b6:	f9 01       	movw	r30, r18
 5b8:	e4 58       	subi	r30, 0x84	; 132
 5ba:	ff 4f       	sbci	r31, 0xFF	; 255
 5bc:	d4 91       	lpm	r29, Z
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:142
	uint8_t port = digitalPinToPort(pin);
 5be:	f9 01       	movw	r30, r18
 5c0:	e0 57       	subi	r30, 0x70	; 112
 5c2:	ff 4f       	sbci	r31, 0xFF	; 255
 5c4:	c4 91       	lpm	r28, Z
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:145
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 5c6:	cc 23       	and	r28, r28
 5c8:	99 f0       	breq	.+38     	; 0x5f0 <digitalWrite+0x4e>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:149

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 5ca:	81 11       	cpse	r24, r1
 5cc:	85 df       	rcall	.-246    	; 0x4d8 <turnOffPWM>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:151

	out = portOutputRegister(port);
 5ce:	ec 2f       	mov	r30, r28
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	ee 0f       	add	r30, r30
 5d4:	ff 1f       	adc	r31, r31
 5d6:	ec 55       	subi	r30, 0x5C	; 92
 5d8:	ff 4f       	sbci	r31, 0xFF	; 255
 5da:	a5 91       	lpm	r26, Z+
 5dc:	b4 91       	lpm	r27, Z
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:153

	uint8_t oldSREG = SREG;
 5de:	8f b7       	in	r24, 0x3f	; 63
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:154
	cli();
 5e0:	f8 94       	cli
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:157

	if (val == LOW) {
		*out &= ~bit;
 5e2:	ec 91       	ld	r30, X
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:156
	if (val == LOW) {
 5e4:	11 11       	cpse	r17, r1
 5e6:	08 c0       	rjmp	.+16     	; 0x5f8 <digitalWrite+0x56>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:157
		*out &= ~bit;
 5e8:	d0 95       	com	r29
 5ea:	de 23       	and	r29, r30
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:159
	} else {
		*out |= bit;
 5ec:	dc 93       	st	X, r29
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:162
	}

	SREG = oldSREG;
 5ee:	8f bf       	out	0x3f, r24	; 63
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:163
}
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	1f 91       	pop	r17
 5f6:	08 95       	ret
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_digital.c:159
		*out |= bit;
 5f8:	de 2b       	or	r29, r30
 5fa:	f8 cf       	rjmp	.-16     	; 0x5ec <digitalWrite+0x4a>

000005fc <analogWrite>:
analogWrite():
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:105
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
 5fc:	1f 93       	push	r17
 5fe:	cf 93       	push	r28
 600:	df 93       	push	r29
 602:	18 2f       	mov	r17, r24
 604:	eb 01       	movw	r28, r22
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:111
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
 606:	61 e0       	ldi	r22, 0x01	; 1
 608:	90 df       	rcall	.-224    	; 0x52a <pinMode>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:112
	if (val == 0)
 60a:	20 97       	sbiw	r28, 0x00	; 0
 60c:	31 f4       	brne	.+12     	; 0x61a <analogWrite+0x1e>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:114
	{
		digitalWrite(pin, LOW);
 60e:	60 e0       	ldi	r22, 0x00	; 0
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:118
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
 610:	81 2f       	mov	r24, r17
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:293
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
 612:	df 91       	pop	r29
 614:	cf 91       	pop	r28
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:118
		digitalWrite(pin, HIGH);
 616:	1f 91       	pop	r17
 618:	c4 cf       	rjmp	.-120    	; 0x5a2 <digitalWrite>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:116
	else if (val == 255)
 61a:	cf 3f       	cpi	r28, 0xFF	; 255
 61c:	d1 05       	cpc	r29, r1
 61e:	11 f4       	brne	.+4      	; 0x624 <analogWrite+0x28>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:118
		digitalWrite(pin, HIGH);
 620:	61 e0       	ldi	r22, 0x01	; 1
 622:	f6 cf       	rjmp	.-20     	; 0x610 <analogWrite+0x14>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:122
		switch(digitalPinToTimer(pin))
 624:	e1 2f       	mov	r30, r17
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	e8 59       	subi	r30, 0x98	; 152
 62a:	ff 4f       	sbci	r31, 0xFF	; 255
 62c:	e4 91       	lpm	r30, Z
 62e:	e3 30       	cpi	r30, 0x03	; 3
 630:	31 f1       	breq	.+76     	; 0x67e <analogWrite+0x82>
 632:	40 f4       	brcc	.+16     	; 0x644 <analogWrite+0x48>
 634:	e1 30       	cpi	r30, 0x01	; 1
 636:	b1 f0       	breq	.+44     	; 0x664 <analogWrite+0x68>
 638:	e2 30       	cpi	r30, 0x02	; 2
 63a:	e1 f0       	breq	.+56     	; 0x674 <analogWrite+0x78>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:286
				if (val < 128) {
 63c:	c0 38       	cpi	r28, 0x80	; 128
 63e:	d1 05       	cpc	r29, r1
 640:	7c f7       	brge	.-34     	; 0x620 <analogWrite+0x24>
 642:	e5 cf       	rjmp	.-54     	; 0x60e <analogWrite+0x12>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:122
		switch(digitalPinToTimer(pin))
 644:	e7 30       	cpi	r30, 0x07	; 7
 646:	29 f1       	breq	.+74     	; 0x692 <analogWrite+0x96>
 648:	e8 30       	cpi	r30, 0x08	; 8
 64a:	59 f1       	breq	.+86     	; 0x6a2 <analogWrite+0xa6>
 64c:	e4 30       	cpi	r30, 0x04	; 4
 64e:	b1 f7       	brne	.-20     	; 0x63c <analogWrite+0x40>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:160
				sbi(TCCR1A, COM1B1);
 650:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 654:	80 62       	ori	r24, 0x20	; 32
 656:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:161
				OCR1B = val; // set pwm duty
 65a:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 65e:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:162
				break;
 662:	04 c0       	rjmp	.+8      	; 0x66c <analogWrite+0x70>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:136
				sbi(TCCR0A, COM0A1);
 664:	84 b5       	in	r24, 0x24	; 36
 666:	80 68       	ori	r24, 0x80	; 128
 668:	84 bd       	out	0x24, r24	; 36
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:137
				OCR0A = val; // set pwm duty
 66a:	c7 bd       	out	0x27, r28	; 39
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:293
}
 66c:	df 91       	pop	r29
 66e:	cf 91       	pop	r28
 670:	1f 91       	pop	r17
 672:	08 95       	ret
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:144
				sbi(TCCR0A, COM0B1);
 674:	84 b5       	in	r24, 0x24	; 36
 676:	80 62       	ori	r24, 0x20	; 32
 678:	84 bd       	out	0x24, r24	; 36
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:145
				OCR0B = val; // set pwm duty
 67a:	c8 bd       	out	0x28, r28	; 40
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:146
				break;
 67c:	f7 cf       	rjmp	.-18     	; 0x66c <analogWrite+0x70>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:152
				sbi(TCCR1A, COM1A1);
 67e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 682:	80 68       	ori	r24, 0x80	; 128
 684:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:153
				OCR1A = val; // set pwm duty
 688:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 68c:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:154
				break;
 690:	ed cf       	rjmp	.-38     	; 0x66c <analogWrite+0x70>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:184
				sbi(TCCR2A, COM2A1);
 692:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 696:	80 68       	ori	r24, 0x80	; 128
 698:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:185
				OCR2A = val; // set pwm duty
 69c:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:186
				break;
 6a0:	e5 cf       	rjmp	.-54     	; 0x66c <analogWrite+0x70>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:192
				sbi(TCCR2A, COM2B1);
 6a2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 6a6:	80 62       	ori	r24, 0x20	; 32
 6a8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:193
				OCR2B = val; // set pwm duty
 6ac:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/wiring_analog.c:194
				break;
 6b0:	dd cf       	rjmp	.-70     	; 0x66c <analogWrite+0x70>

000006b2 <__vector_18>:
__vector_18():
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial0.cpp:48
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 6b2:	1f 92       	push	r1
 6b4:	0f 92       	push	r0
 6b6:	0f b6       	in	r0, 0x3f	; 63
 6b8:	0f 92       	push	r0
 6ba:	11 24       	eor	r1, r1
 6bc:	2f 93       	push	r18
 6be:	8f 93       	push	r24
 6c0:	9f 93       	push	r25
 6c2:	ef 93       	push	r30
 6c4:	ff 93       	push	r31
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 6c6:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Serial+0x10>
 6ca:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Serial+0x11>
 6ce:	80 81       	ld	r24, Z
 6d0:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <Serial+0x16>
 6d4:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <Serial+0x17>
 6d8:	82 fd       	sbrc	r24, 2
 6da:	1b c0       	rjmp	.+54     	; 0x712 <__vector_18+0x60>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 6dc:	90 81       	ld	r25, Z
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 6de:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <Serial+0x19>
 6e2:	8f 5f       	subi	r24, 0xFF	; 255
 6e4:	8f 73       	andi	r24, 0x3F	; 63
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 6e6:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <Serial+0x1a>
 6ea:	82 17       	cp	r24, r18
 6ec:	41 f0       	breq	.+16     	; 0x6fe <__vector_18+0x4c>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
 6ee:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <Serial+0x19>
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	eb 5d       	subi	r30, 0xDB	; 219
 6f6:	fe 4f       	sbci	r31, 0xFE	; 254
 6f8:	95 8f       	std	Z+29, r25	; 0x1d
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial_private.h:115
      _rx_buffer_head = i;
 6fa:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <Serial+0x19>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial0.cpp:50
    Serial._rx_complete_irq();
  }
 6fe:	ff 91       	pop	r31
 700:	ef 91       	pop	r30
 702:	9f 91       	pop	r25
 704:	8f 91       	pop	r24
 706:	2f 91       	pop	r18
 708:	0f 90       	pop	r0
 70a:	0f be       	out	0x3f, r0	; 63
 70c:	0f 90       	pop	r0
 70e:	1f 90       	pop	r1
 710:	18 95       	reti
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 712:	80 81       	ld	r24, Z
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial0.cpp:50
 714:	f4 cf       	rjmp	.-24     	; 0x6fe <__vector_18+0x4c>

00000716 <__vector_19>:
__vector_19():
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial0.cpp:63
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 716:	1f 92       	push	r1
 718:	0f 92       	push	r0
 71a:	0f b6       	in	r0, 0x3f	; 63
 71c:	0f 92       	push	r0
 71e:	11 24       	eor	r1, r1
 720:	2f 93       	push	r18
 722:	3f 93       	push	r19
 724:	4f 93       	push	r20
 726:	5f 93       	push	r21
 728:	6f 93       	push	r22
 72a:	7f 93       	push	r23
 72c:	8f 93       	push	r24
 72e:	9f 93       	push	r25
 730:	af 93       	push	r26
 732:	bf 93       	push	r27
 734:	ef 93       	push	r30
 736:	ff 93       	push	r31
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
 738:	85 e2       	ldi	r24, 0x25	; 37
 73a:	91 e0       	ldi	r25, 0x01	; 1
 73c:	c6 d0       	rcall	.+396    	; 0x8ca <HardwareSerial::_tx_udr_empty_irq()>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial0.cpp:65
}
 73e:	ff 91       	pop	r31
 740:	ef 91       	pop	r30
 742:	bf 91       	pop	r27
 744:	af 91       	pop	r26
 746:	9f 91       	pop	r25
 748:	8f 91       	pop	r24
 74a:	7f 91       	pop	r23
 74c:	6f 91       	pop	r22
 74e:	5f 91       	pop	r21
 750:	4f 91       	pop	r20
 752:	3f 91       	pop	r19
 754:	2f 91       	pop	r18
 756:	0f 90       	pop	r0
 758:	0f be       	out	0x3f, r0	; 63
 75a:	0f 90       	pop	r0
 75c:	1f 90       	pop	r1
 75e:	18 95       	reti

00000760 <Serial0_available()>:
_Z17Serial0_availablev():
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 760:	85 e2       	ldi	r24, 0x25	; 37
 762:	91 e0       	ldi	r25, 0x01	; 1
 764:	67 d0       	rcall	.+206    	; 0x834 <HardwareSerial::available()>
 766:	21 e0       	ldi	r18, 0x01	; 1
 768:	89 2b       	or	r24, r25
 76a:	09 f4       	brne	.+2      	; 0x76e <Serial0_available()+0xe>
 76c:	20 e0       	ldi	r18, 0x00	; 0
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial0.cpp:77
}
 76e:	82 2f       	mov	r24, r18
 770:	08 95       	ret

00000772 <_GLOBAL__sub_I___vector_18>:
_GLOBAL__sub_I___vector_18():
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 772:	e5 e2       	ldi	r30, 0x25	; 37
 774:	f1 e0       	ldi	r31, 0x01	; 1
 776:	13 82       	std	Z+3, r1	; 0x03
 778:	12 82       	std	Z+2, r1	; 0x02
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 77a:	88 ee       	ldi	r24, 0xE8	; 232
 77c:	93 e0       	ldi	r25, 0x03	; 3
 77e:	a0 e0       	ldi	r26, 0x00	; 0
 780:	b0 e0       	ldi	r27, 0x00	; 0
 782:	84 83       	std	Z+4, r24	; 0x04
 784:	95 83       	std	Z+5, r25	; 0x05
 786:	a6 83       	std	Z+6, r26	; 0x06
 788:	b7 83       	std	Z+7, r27	; 0x07
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial_private.h:95
    _tx_buffer_head(0), _tx_buffer_tail(0)
 78a:	8e e0       	ldi	r24, 0x0E	; 14
 78c:	91 e0       	ldi	r25, 0x01	; 1
 78e:	91 83       	std	Z+1, r25	; 0x01
 790:	80 83       	st	Z, r24
 792:	85 ec       	ldi	r24, 0xC5	; 197
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	95 87       	std	Z+13, r25	; 0x0d
 798:	84 87       	std	Z+12, r24	; 0x0c
 79a:	84 ec       	ldi	r24, 0xC4	; 196
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	97 87       	std	Z+15, r25	; 0x0f
 7a0:	86 87       	std	Z+14, r24	; 0x0e
 7a2:	80 ec       	ldi	r24, 0xC0	; 192
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	91 8b       	std	Z+17, r25	; 0x11
 7a8:	80 8b       	std	Z+16, r24	; 0x10
 7aa:	81 ec       	ldi	r24, 0xC1	; 193
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	93 8b       	std	Z+19, r25	; 0x13
 7b0:	82 8b       	std	Z+18, r24	; 0x12
 7b2:	82 ec       	ldi	r24, 0xC2	; 194
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	95 8b       	std	Z+21, r25	; 0x15
 7b8:	84 8b       	std	Z+20, r24	; 0x14
 7ba:	86 ec       	ldi	r24, 0xC6	; 198
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	97 8b       	std	Z+23, r25	; 0x17
 7c0:	86 8b       	std	Z+22, r24	; 0x16
 7c2:	11 8e       	std	Z+25, r1	; 0x19
 7c4:	12 8e       	std	Z+26, r1	; 0x1a
 7c6:	13 8e       	std	Z+27, r1	; 0x1b
 7c8:	14 8e       	std	Z+28, r1	; 0x1c
 7ca:	08 95       	ret

000007cc <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 7cc:	cf 92       	push	r12
 7ce:	df 92       	push	r13
 7d0:	ef 92       	push	r14
 7d2:	ff 92       	push	r15
 7d4:	0f 93       	push	r16
 7d6:	1f 93       	push	r17
 7d8:	cf 93       	push	r28
 7da:	df 93       	push	r29
 7dc:	7c 01       	movw	r14, r24
 7de:	6a 01       	movw	r12, r20
 7e0:	8b 01       	movw	r16, r22
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/Print.cpp:36
  size_t n = 0;
 7e2:	c0 e0       	ldi	r28, 0x00	; 0
 7e4:	d0 e0       	ldi	r29, 0x00	; 0
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/Print.cpp:37
  while (size--) {
 7e6:	cc 15       	cp	r28, r12
 7e8:	dd 05       	cpc	r29, r13
 7ea:	79 f0       	breq	.+30     	; 0x80a <Print::write(unsigned char const*, unsigned int)+0x3e>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/Print.cpp:38
    if (write(*buffer++)) n++;
 7ec:	d8 01       	movw	r26, r16
 7ee:	6d 91       	ld	r22, X+
 7f0:	8d 01       	movw	r16, r26
 7f2:	d7 01       	movw	r26, r14
 7f4:	ed 91       	ld	r30, X+
 7f6:	fc 91       	ld	r31, X
 7f8:	01 90       	ld	r0, Z+
 7fa:	f0 81       	ld	r31, Z
 7fc:	e0 2d       	mov	r30, r0
 7fe:	c7 01       	movw	r24, r14
 800:	09 95       	icall
 802:	89 2b       	or	r24, r25
 804:	11 f0       	breq	.+4      	; 0x80a <Print::write(unsigned char const*, unsigned int)+0x3e>
 806:	21 96       	adiw	r28, 0x01	; 1
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/Print.cpp:37
  while (size--) {
 808:	ee cf       	rjmp	.-36     	; 0x7e6 <Print::write(unsigned char const*, unsigned int)+0x1a>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/Print.cpp:42
    else break;
  }
  return n;
}
 80a:	ce 01       	movw	r24, r28
 80c:	df 91       	pop	r29
 80e:	cf 91       	pop	r28
 810:	1f 91       	pop	r17
 812:	0f 91       	pop	r16
 814:	ff 90       	pop	r15
 816:	ef 90       	pop	r14
 818:	df 90       	pop	r13
 81a:	cf 90       	pop	r12
 81c:	08 95       	ret

0000081e <initVariant>:
 81e:	08 95       	ret

00000820 <main>:
main():
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/main.cpp:35
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 820:	20 de       	rcall	.-960    	; 0x462 <init>
 822:	fd df       	rcall	.-6      	; 0x81e <initVariant>
 824:	70 dc       	rcall	.-1824   	; 0x106 <setup>
 826:	c8 e5       	ldi	r28, 0x58	; 88
 828:	d4 e0       	ldi	r29, 0x04	; 4
 82a:	47 dd       	rcall	.-1394   	; 0x2ba <loop>
 82c:	20 97       	sbiw	r28, 0x00	; 0
 82e:	e9 f3       	breq	.-6      	; 0x82a <main+0xa>
 830:	3f d0       	rcall	.+126    	; 0x8b0 <serialEventRun()>
 832:	fb cf       	rjmp	.-10     	; 0x82a <main+0xa>

00000834 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:153
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 834:	fc 01       	movw	r30, r24
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:154
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 836:	91 8d       	ldd	r25, Z+25	; 0x19
 838:	22 8d       	ldd	r18, Z+26	; 0x1a
 83a:	89 2f       	mov	r24, r25
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	80 5c       	subi	r24, 0xC0	; 192
 840:	9f 4f       	sbci	r25, 0xFF	; 255
 842:	82 1b       	sub	r24, r18
 844:	91 09       	sbc	r25, r1
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:155
}
 846:	8f 73       	andi	r24, 0x3F	; 63
 848:	99 27       	eor	r25, r25
 84a:	08 95       	ret

0000084c <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:158

int HardwareSerial::peek(void)
{
 84c:	fc 01       	movw	r30, r24
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:159
  if (_rx_buffer_head == _rx_buffer_tail) {
 84e:	91 8d       	ldd	r25, Z+25	; 0x19
 850:	82 8d       	ldd	r24, Z+26	; 0x1a
 852:	98 17       	cp	r25, r24
 854:	31 f0       	breq	.+12     	; 0x862 <HardwareSerial::peek()+0x16>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:162
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 856:	82 8d       	ldd	r24, Z+26	; 0x1a
 858:	e8 0f       	add	r30, r24
 85a:	f1 1d       	adc	r31, r1
 85c:	85 8d       	ldd	r24, Z+29	; 0x1d
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	08 95       	ret
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:160
    return -1;
 862:	8f ef       	ldi	r24, 0xFF	; 255
 864:	9f ef       	ldi	r25, 0xFF	; 255
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:164
  }
}
 866:	08 95       	ret

00000868 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
 868:	fc 01       	movw	r30, r24
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:169
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 86a:	91 8d       	ldd	r25, Z+25	; 0x19
 86c:	82 8d       	ldd	r24, Z+26	; 0x1a
 86e:	98 17       	cp	r25, r24
 870:	61 f0       	breq	.+24     	; 0x88a <HardwareSerial::read()+0x22>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:172
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 872:	82 8d       	ldd	r24, Z+26	; 0x1a
 874:	df 01       	movw	r26, r30
 876:	a8 0f       	add	r26, r24
 878:	b1 1d       	adc	r27, r1
 87a:	5d 96       	adiw	r26, 0x1d	; 29
 87c:	8c 91       	ld	r24, X
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:173
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 87e:	92 8d       	ldd	r25, Z+26	; 0x1a
 880:	9f 5f       	subi	r25, 0xFF	; 255
 882:	9f 73       	andi	r25, 0x3F	; 63
 884:	92 8f       	std	Z+26, r25	; 0x1a
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:174
    return c;
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	08 95       	ret
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:170
    return -1;
 88a:	8f ef       	ldi	r24, 0xFF	; 255
 88c:	9f ef       	ldi	r25, 0xFF	; 255
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:176
  }
}
 88e:	08 95       	ret

00000890 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:184
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 890:	fc 01       	movw	r30, r24
 892:	23 8d       	ldd	r18, Z+27	; 0x1b
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:185
  tx_buffer_index_t tail = _tx_buffer_tail;
 894:	84 8d       	ldd	r24, Z+28	; 0x1c
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:189
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 896:	30 e0       	ldi	r19, 0x00	; 0
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	28 17       	cp	r18, r24
 89c:	39 07       	cpc	r19, r25
 89e:	24 f0       	brlt	.+8      	; 0x8a8 <HardwareSerial::availableForWrite()+0x18>
 8a0:	82 1b       	sub	r24, r18
 8a2:	93 0b       	sbc	r25, r19
 8a4:	cf 96       	adiw	r24, 0x3f	; 63
 8a6:	08 95       	ret
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:190
  return tail - head - 1;
 8a8:	82 1b       	sub	r24, r18
 8aa:	93 0b       	sbc	r25, r19
 8ac:	01 97       	sbiw	r24, 0x01	; 1
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:191
}
 8ae:	08 95       	ret

000008b0 <serialEventRun()>:
_Z14serialEventRunv():
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:66
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 8b0:	80 eb       	ldi	r24, 0xB0	; 176
 8b2:	93 e0       	ldi	r25, 0x03	; 3
 8b4:	89 2b       	or	r24, r25
 8b6:	41 f0       	breq	.+16     	; 0x8c8 <serialEventRun()+0x18>
 8b8:	80 e0       	ldi	r24, 0x00	; 0
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	89 2b       	or	r24, r25
 8be:	21 f0       	breq	.+8      	; 0x8c8 <serialEventRun()+0x18>
 8c0:	4f df       	rcall	.-354    	; 0x760 <Serial0_available()>
 8c2:	81 11       	cpse	r24, r1
 8c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 8c8:	08 95       	ret

000008ca <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:82
{
 8ca:	fc 01       	movw	r30, r24
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:85
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 8cc:	84 8d       	ldd	r24, Z+28	; 0x1c
 8ce:	df 01       	movw	r26, r30
 8d0:	a8 0f       	add	r26, r24
 8d2:	b1 1d       	adc	r27, r1
 8d4:	a3 5a       	subi	r26, 0xA3	; 163
 8d6:	bf 4f       	sbci	r27, 0xFF	; 255
 8d8:	2c 91       	ld	r18, X
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 8da:	84 8d       	ldd	r24, Z+28	; 0x1c
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	01 96       	adiw	r24, 0x01	; 1
 8e0:	8f 73       	andi	r24, 0x3F	; 63
 8e2:	99 27       	eor	r25, r25
 8e4:	84 8f       	std	Z+28, r24	; 0x1c
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:88
  *_udr = c;
 8e6:	a6 89       	ldd	r26, Z+22	; 0x16
 8e8:	b7 89       	ldd	r27, Z+23	; 0x17
 8ea:	2c 93       	st	X, r18
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:93
  sbi(*_ucsra, TXC0);
 8ec:	a0 89       	ldd	r26, Z+16	; 0x10
 8ee:	b1 89       	ldd	r27, Z+17	; 0x11
 8f0:	8c 91       	ld	r24, X
 8f2:	80 64       	ori	r24, 0x40	; 64
 8f4:	8c 93       	st	X, r24
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:95
  if (_tx_buffer_head == _tx_buffer_tail) {
 8f6:	93 8d       	ldd	r25, Z+27	; 0x1b
 8f8:	84 8d       	ldd	r24, Z+28	; 0x1c
 8fa:	98 13       	cpse	r25, r24
 8fc:	06 c0       	rjmp	.+12     	; 0x90a <__stack+0xb>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:97
    cbi(*_ucsrb, UDRIE0);
 8fe:	02 88       	ldd	r0, Z+18	; 0x12
 900:	f3 89       	ldd	r31, Z+19	; 0x13
 902:	e0 2d       	mov	r30, r0
 904:	80 81       	ld	r24, Z
 906:	8f 7d       	andi	r24, 0xDF	; 223
 908:	80 83       	st	Z, r24
 90a:	08 95       	ret

0000090c <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:194

void HardwareSerial::flush()
{
 90c:	cf 93       	push	r28
 90e:	df 93       	push	r29
 910:	ec 01       	movw	r28, r24
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:198
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 912:	88 8d       	ldd	r24, Y+24	; 0x18
 914:	88 23       	and	r24, r24
 916:	51 f0       	breq	.+20     	; 0x92c <HardwareSerial::flush()+0x20>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:201
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 918:	ea 89       	ldd	r30, Y+18	; 0x12
 91a:	fb 89       	ldd	r31, Y+19	; 0x13
 91c:	80 81       	ld	r24, Z
 91e:	85 fd       	sbrc	r24, 5
 920:	08 c0       	rjmp	.+16     	; 0x932 <HardwareSerial::flush()+0x26>
 922:	a8 89       	ldd	r26, Y+16	; 0x10
 924:	b9 89       	ldd	r27, Y+17	; 0x11
 926:	8c 91       	ld	r24, X
 928:	86 ff       	sbrs	r24, 6
 92a:	03 c0       	rjmp	.+6      	; 0x932 <HardwareSerial::flush()+0x26>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:211
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 92c:	df 91       	pop	r29
 92e:	cf 91       	pop	r28
 930:	08 95       	ret
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:202
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 932:	0f b6       	in	r0, 0x3f	; 63
 934:	07 fc       	sbrc	r0, 7
 936:	f2 cf       	rjmp	.-28     	; 0x91c <HardwareSerial::flush()+0x10>
 938:	80 81       	ld	r24, Z
 93a:	85 ff       	sbrs	r24, 5
 93c:	ef cf       	rjmp	.-34     	; 0x91c <HardwareSerial::flush()+0x10>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:206
	if (bit_is_set(*_ucsra, UDRE0))
 93e:	e8 89       	ldd	r30, Y+16	; 0x10
 940:	f9 89       	ldd	r31, Y+17	; 0x11
 942:	80 81       	ld	r24, Z
 944:	85 ff       	sbrs	r24, 5
 946:	e8 cf       	rjmp	.-48     	; 0x918 <HardwareSerial::flush()+0xc>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:207
	  _tx_udr_empty_irq();
 948:	ce 01       	movw	r24, r28
 94a:	bf df       	rcall	.-130    	; 0x8ca <HardwareSerial::_tx_udr_empty_irq()>
 94c:	e5 cf       	rjmp	.-54     	; 0x918 <HardwareSerial::flush()+0xc>

0000094e <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:214

size_t HardwareSerial::write(uint8_t c)
{
 94e:	ef 92       	push	r14
 950:	ff 92       	push	r15
 952:	0f 93       	push	r16
 954:	1f 93       	push	r17
 956:	cf 93       	push	r28
 958:	df 93       	push	r29
 95a:	ec 01       	movw	r28, r24
 95c:	f6 2e       	mov	r15, r22
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:215
  _written = true;
 95e:	81 e0       	ldi	r24, 0x01	; 1
 960:	88 8f       	std	Y+24, r24	; 0x18
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:220
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 962:	9b 8d       	ldd	r25, Y+27	; 0x1b
 964:	8c 8d       	ldd	r24, Y+28	; 0x1c
 966:	98 13       	cpse	r25, r24
 968:	05 c0       	rjmp	.+10     	; 0x974 <HardwareSerial::write(unsigned char)+0x26>
 96a:	e8 89       	ldd	r30, Y+16	; 0x10
 96c:	f9 89       	ldd	r31, Y+17	; 0x11
 96e:	80 81       	ld	r24, Z
 970:	85 fd       	sbrc	r24, 5
 972:	2b c0       	rjmp	.+86     	; 0x9ca <HardwareSerial::write(unsigned char)+0x7c>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:225
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 974:	0b 8d       	ldd	r16, Y+27	; 0x1b
 976:	10 e0       	ldi	r17, 0x00	; 0
 978:	0f 5f       	subi	r16, 0xFF	; 255
 97a:	1f 4f       	sbci	r17, 0xFF	; 255
 97c:	0f 73       	andi	r16, 0x3F	; 63
 97e:	11 27       	eor	r17, r17
 980:	e0 2e       	mov	r14, r16
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:229
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 982:	8c 8d       	ldd	r24, Y+28	; 0x1c
 984:	e8 12       	cpse	r14, r24
 986:	0b c0       	rjmp	.+22     	; 0x99e <HardwareSerial::write(unsigned char)+0x50>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:230
    if (bit_is_clear(SREG, SREG_I)) {
 988:	0f b6       	in	r0, 0x3f	; 63
 98a:	07 fc       	sbrc	r0, 7
 98c:	fa cf       	rjmp	.-12     	; 0x982 <HardwareSerial::write(unsigned char)+0x34>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:235
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 98e:	e8 89       	ldd	r30, Y+16	; 0x10
 990:	f9 89       	ldd	r31, Y+17	; 0x11
 992:	80 81       	ld	r24, Z
 994:	85 ff       	sbrs	r24, 5
 996:	f5 cf       	rjmp	.-22     	; 0x982 <HardwareSerial::write(unsigned char)+0x34>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:236
	_tx_udr_empty_irq();
 998:	ce 01       	movw	r24, r28
 99a:	97 df       	rcall	.-210    	; 0x8ca <HardwareSerial::_tx_udr_empty_irq()>
 99c:	f2 cf       	rjmp	.-28     	; 0x982 <HardwareSerial::write(unsigned char)+0x34>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:242
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 99e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 9a0:	fe 01       	movw	r30, r28
 9a2:	e8 0f       	add	r30, r24
 9a4:	f1 1d       	adc	r31, r1
 9a6:	e3 5a       	subi	r30, 0xA3	; 163
 9a8:	ff 4f       	sbci	r31, 0xFF	; 255
 9aa:	f0 82       	st	Z, r15
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:243
  _tx_buffer_head = i;
 9ac:	0b 8f       	std	Y+27, r16	; 0x1b
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:245
	
  sbi(*_ucsrb, UDRIE0);
 9ae:	ea 89       	ldd	r30, Y+18	; 0x12
 9b0:	fb 89       	ldd	r31, Y+19	; 0x13
 9b2:	80 81       	ld	r24, Z
 9b4:	80 62       	ori	r24, 0x20	; 32
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:222
    sbi(*_ucsra, TXC0);
 9b6:	80 83       	st	Z, r24
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:248
  
  return 1;
}
 9b8:	81 e0       	ldi	r24, 0x01	; 1
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	df 91       	pop	r29
 9be:	cf 91       	pop	r28
 9c0:	1f 91       	pop	r17
 9c2:	0f 91       	pop	r16
 9c4:	ff 90       	pop	r15
 9c6:	ef 90       	pop	r14
 9c8:	08 95       	ret
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:221
    *_udr = c;
 9ca:	ee 89       	ldd	r30, Y+22	; 0x16
 9cc:	ff 89       	ldd	r31, Y+23	; 0x17
 9ce:	60 83       	st	Z, r22
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:222
    sbi(*_ucsra, TXC0);
 9d0:	e8 89       	ldd	r30, Y+16	; 0x10
 9d2:	f9 89       	ldd	r31, Y+17	; 0x11
 9d4:	80 81       	ld	r24, Z
 9d6:	80 64       	ori	r24, 0x40	; 64
 9d8:	ee cf       	rjmp	.-36     	; 0x9b6 <HardwareSerial::write(unsigned char)+0x68>

000009da <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:104
{
 9da:	cf 92       	push	r12
 9dc:	df 92       	push	r13
 9de:	ef 92       	push	r14
 9e0:	ff 92       	push	r15
 9e2:	1f 93       	push	r17
 9e4:	cf 93       	push	r28
 9e6:	df 93       	push	r29
 9e8:	ec 01       	movw	r28, r24
 9ea:	6a 01       	movw	r12, r20
 9ec:	7b 01       	movw	r14, r22
 9ee:	12 2f       	mov	r17, r18
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:107
  *_ucsra = 1 << U2X0;
 9f0:	e8 89       	ldd	r30, Y+16	; 0x10
 9f2:	f9 89       	ldd	r31, Y+17	; 0x11
 9f4:	82 e0       	ldi	r24, 0x02	; 2
 9f6:	80 83       	st	Z, r24
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:114
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 9f8:	41 15       	cp	r20, r1
 9fa:	51 4e       	sbci	r21, 0xE1	; 225
 9fc:	61 05       	cpc	r22, r1
 9fe:	71 05       	cpc	r23, r1
 a00:	99 f0       	breq	.+38     	; 0xa28 <HardwareSerial::begin(unsigned long, unsigned char)+0x4e>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:106
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 a02:	60 e0       	ldi	r22, 0x00	; 0
 a04:	79 e0       	ldi	r23, 0x09	; 9
 a06:	8d e3       	ldi	r24, 0x3D	; 61
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	a7 01       	movw	r20, r14
 a0c:	96 01       	movw	r18, r12
 a0e:	a9 d0       	rcall	.+338    	; 0xb62 <__udivmodsi4>
 a10:	21 50       	subi	r18, 0x01	; 1
 a12:	31 09       	sbc	r19, r1
 a14:	41 09       	sbc	r20, r1
 a16:	51 09       	sbc	r21, r1
 a18:	56 95       	lsr	r21
 a1a:	47 95       	ror	r20
 a1c:	37 95       	ror	r19
 a1e:	27 95       	ror	r18
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:114
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 a20:	21 15       	cp	r18, r1
 a22:	80 e1       	ldi	r24, 0x10	; 16
 a24:	38 07       	cpc	r19, r24
 a26:	90 f0       	brcs	.+36     	; 0xa4c <HardwareSerial::begin(unsigned long, unsigned char)+0x72>
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:116
    *_ucsra = 0;
 a28:	e8 89       	ldd	r30, Y+16	; 0x10
 a2a:	f9 89       	ldd	r31, Y+17	; 0x11
 a2c:	10 82       	st	Z, r1
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 a2e:	60 e8       	ldi	r22, 0x80	; 128
 a30:	74 e8       	ldi	r23, 0x84	; 132
 a32:	8e e1       	ldi	r24, 0x1E	; 30
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	a7 01       	movw	r20, r14
 a38:	96 01       	movw	r18, r12
 a3a:	93 d0       	rcall	.+294    	; 0xb62 <__udivmodsi4>
 a3c:	21 50       	subi	r18, 0x01	; 1
 a3e:	31 09       	sbc	r19, r1
 a40:	41 09       	sbc	r20, r1
 a42:	51 09       	sbc	r21, r1
 a44:	56 95       	lsr	r21
 a46:	47 95       	ror	r20
 a48:	37 95       	ror	r19
 a4a:	27 95       	ror	r18
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:121
  *_ubrrh = baud_setting >> 8;
 a4c:	ec 85       	ldd	r30, Y+12	; 0x0c
 a4e:	fd 85       	ldd	r31, Y+13	; 0x0d
 a50:	30 83       	st	Z, r19
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
 a52:	ee 85       	ldd	r30, Y+14	; 0x0e
 a54:	ff 85       	ldd	r31, Y+15	; 0x0f
 a56:	20 83       	st	Z, r18
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:124
  _written = false;
 a58:	18 8e       	std	Y+24, r1	; 0x18
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:130
  *_ucsrc = config;
 a5a:	ec 89       	ldd	r30, Y+20	; 0x14
 a5c:	fd 89       	ldd	r31, Y+21	; 0x15
 a5e:	10 83       	st	Z, r17
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:132
  sbi(*_ucsrb, RXEN0);
 a60:	ea 89       	ldd	r30, Y+18	; 0x12
 a62:	fb 89       	ldd	r31, Y+19	; 0x13
 a64:	80 81       	ld	r24, Z
 a66:	80 61       	ori	r24, 0x10	; 16
 a68:	80 83       	st	Z, r24
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:133
  sbi(*_ucsrb, TXEN0);
 a6a:	ea 89       	ldd	r30, Y+18	; 0x12
 a6c:	fb 89       	ldd	r31, Y+19	; 0x13
 a6e:	80 81       	ld	r24, Z
 a70:	88 60       	ori	r24, 0x08	; 8
 a72:	80 83       	st	Z, r24
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:134
  sbi(*_ucsrb, RXCIE0);
 a74:	ea 89       	ldd	r30, Y+18	; 0x12
 a76:	fb 89       	ldd	r31, Y+19	; 0x13
 a78:	80 81       	ld	r24, Z
 a7a:	80 68       	ori	r24, 0x80	; 128
 a7c:	80 83       	st	Z, r24
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:135
  cbi(*_ucsrb, UDRIE0);
 a7e:	ea 89       	ldd	r30, Y+18	; 0x12
 a80:	fb 89       	ldd	r31, Y+19	; 0x13
 a82:	80 81       	ld	r24, Z
 a84:	8f 7d       	andi	r24, 0xDF	; 223
 a86:	80 83       	st	Z, r24
/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/HardwareSerial.cpp:136
}
 a88:	df 91       	pop	r29
 a8a:	cf 91       	pop	r28
 a8c:	1f 91       	pop	r17
 a8e:	ff 90       	pop	r15
 a90:	ef 90       	pop	r14
 a92:	df 90       	pop	r13
 a94:	cf 90       	pop	r12
 a96:	08 95       	ret

00000a98 <__cmpsf2>:
 a98:	40 d0       	rcall	.+128    	; 0xb1a <__fp_cmp>
 a9a:	08 f4       	brcc	.+2      	; 0xa9e <__cmpsf2+0x6>
 a9c:	81 e0       	ldi	r24, 0x01	; 1
 a9e:	08 95       	ret

00000aa0 <__floatunsisf>:
 aa0:	e8 94       	clt
 aa2:	09 c0       	rjmp	.+18     	; 0xab6 <__floatsisf+0x12>

00000aa4 <__floatsisf>:
 aa4:	97 fb       	bst	r25, 7
 aa6:	3e f4       	brtc	.+14     	; 0xab6 <__floatsisf+0x12>
 aa8:	90 95       	com	r25
 aaa:	80 95       	com	r24
 aac:	70 95       	com	r23
 aae:	61 95       	neg	r22
 ab0:	7f 4f       	sbci	r23, 0xFF	; 255
 ab2:	8f 4f       	sbci	r24, 0xFF	; 255
 ab4:	9f 4f       	sbci	r25, 0xFF	; 255
 ab6:	99 23       	and	r25, r25
 ab8:	a9 f0       	breq	.+42     	; 0xae4 <__floatsisf+0x40>
 aba:	f9 2f       	mov	r31, r25
 abc:	96 e9       	ldi	r25, 0x96	; 150
 abe:	bb 27       	eor	r27, r27
 ac0:	93 95       	inc	r25
 ac2:	f6 95       	lsr	r31
 ac4:	87 95       	ror	r24
 ac6:	77 95       	ror	r23
 ac8:	67 95       	ror	r22
 aca:	b7 95       	ror	r27
 acc:	f1 11       	cpse	r31, r1
 ace:	f8 cf       	rjmp	.-16     	; 0xac0 <__floatsisf+0x1c>
 ad0:	fa f4       	brpl	.+62     	; 0xb10 <__floatsisf+0x6c>
 ad2:	bb 0f       	add	r27, r27
 ad4:	11 f4       	brne	.+4      	; 0xada <__floatsisf+0x36>
 ad6:	60 ff       	sbrs	r22, 0
 ad8:	1b c0       	rjmp	.+54     	; 0xb10 <__floatsisf+0x6c>
 ada:	6f 5f       	subi	r22, 0xFF	; 255
 adc:	7f 4f       	sbci	r23, 0xFF	; 255
 ade:	8f 4f       	sbci	r24, 0xFF	; 255
 ae0:	9f 4f       	sbci	r25, 0xFF	; 255
 ae2:	16 c0       	rjmp	.+44     	; 0xb10 <__floatsisf+0x6c>
 ae4:	88 23       	and	r24, r24
 ae6:	11 f0       	breq	.+4      	; 0xaec <__floatsisf+0x48>
 ae8:	96 e9       	ldi	r25, 0x96	; 150
 aea:	11 c0       	rjmp	.+34     	; 0xb0e <__floatsisf+0x6a>
 aec:	77 23       	and	r23, r23
 aee:	21 f0       	breq	.+8      	; 0xaf8 <__floatsisf+0x54>
 af0:	9e e8       	ldi	r25, 0x8E	; 142
 af2:	87 2f       	mov	r24, r23
 af4:	76 2f       	mov	r23, r22
 af6:	05 c0       	rjmp	.+10     	; 0xb02 <__floatsisf+0x5e>
 af8:	66 23       	and	r22, r22
 afa:	71 f0       	breq	.+28     	; 0xb18 <__floatsisf+0x74>
 afc:	96 e8       	ldi	r25, 0x86	; 134
 afe:	86 2f       	mov	r24, r22
 b00:	70 e0       	ldi	r23, 0x00	; 0
 b02:	60 e0       	ldi	r22, 0x00	; 0
 b04:	2a f0       	brmi	.+10     	; 0xb10 <__floatsisf+0x6c>
 b06:	9a 95       	dec	r25
 b08:	66 0f       	add	r22, r22
 b0a:	77 1f       	adc	r23, r23
 b0c:	88 1f       	adc	r24, r24
 b0e:	da f7       	brpl	.-10     	; 0xb06 <__floatsisf+0x62>
 b10:	88 0f       	add	r24, r24
 b12:	96 95       	lsr	r25
 b14:	87 95       	ror	r24
 b16:	97 f9       	bld	r25, 7
 b18:	08 95       	ret

00000b1a <__fp_cmp>:
 b1a:	99 0f       	add	r25, r25
 b1c:	00 08       	sbc	r0, r0
 b1e:	55 0f       	add	r21, r21
 b20:	aa 0b       	sbc	r26, r26
 b22:	e0 e8       	ldi	r30, 0x80	; 128
 b24:	fe ef       	ldi	r31, 0xFE	; 254
 b26:	16 16       	cp	r1, r22
 b28:	17 06       	cpc	r1, r23
 b2a:	e8 07       	cpc	r30, r24
 b2c:	f9 07       	cpc	r31, r25
 b2e:	c0 f0       	brcs	.+48     	; 0xb60 <__fp_cmp+0x46>
 b30:	12 16       	cp	r1, r18
 b32:	13 06       	cpc	r1, r19
 b34:	e4 07       	cpc	r30, r20
 b36:	f5 07       	cpc	r31, r21
 b38:	98 f0       	brcs	.+38     	; 0xb60 <__fp_cmp+0x46>
 b3a:	62 1b       	sub	r22, r18
 b3c:	73 0b       	sbc	r23, r19
 b3e:	84 0b       	sbc	r24, r20
 b40:	95 0b       	sbc	r25, r21
 b42:	39 f4       	brne	.+14     	; 0xb52 <__fp_cmp+0x38>
 b44:	0a 26       	eor	r0, r26
 b46:	61 f0       	breq	.+24     	; 0xb60 <__fp_cmp+0x46>
 b48:	23 2b       	or	r18, r19
 b4a:	24 2b       	or	r18, r20
 b4c:	25 2b       	or	r18, r21
 b4e:	21 f4       	brne	.+8      	; 0xb58 <__fp_cmp+0x3e>
 b50:	08 95       	ret
 b52:	0a 26       	eor	r0, r26
 b54:	09 f4       	brne	.+2      	; 0xb58 <__fp_cmp+0x3e>
 b56:	a1 40       	sbci	r26, 0x01	; 1
 b58:	a6 95       	lsr	r26
 b5a:	8f ef       	ldi	r24, 0xFF	; 255
 b5c:	81 1d       	adc	r24, r1
 b5e:	81 1d       	adc	r24, r1
 b60:	08 95       	ret

00000b62 <__udivmodsi4>:
 b62:	a1 e2       	ldi	r26, 0x21	; 33
 b64:	1a 2e       	mov	r1, r26
 b66:	aa 1b       	sub	r26, r26
 b68:	bb 1b       	sub	r27, r27
 b6a:	fd 01       	movw	r30, r26
 b6c:	0d c0       	rjmp	.+26     	; 0xb88 <__udivmodsi4_ep>

00000b6e <__udivmodsi4_loop>:
 b6e:	aa 1f       	adc	r26, r26
 b70:	bb 1f       	adc	r27, r27
 b72:	ee 1f       	adc	r30, r30
 b74:	ff 1f       	adc	r31, r31
 b76:	a2 17       	cp	r26, r18
 b78:	b3 07       	cpc	r27, r19
 b7a:	e4 07       	cpc	r30, r20
 b7c:	f5 07       	cpc	r31, r21
 b7e:	20 f0       	brcs	.+8      	; 0xb88 <__udivmodsi4_ep>
 b80:	a2 1b       	sub	r26, r18
 b82:	b3 0b       	sbc	r27, r19
 b84:	e4 0b       	sbc	r30, r20
 b86:	f5 0b       	sbc	r31, r21

00000b88 <__udivmodsi4_ep>:
 b88:	66 1f       	adc	r22, r22
 b8a:	77 1f       	adc	r23, r23
 b8c:	88 1f       	adc	r24, r24
 b8e:	99 1f       	adc	r25, r25
 b90:	1a 94       	dec	r1
 b92:	69 f7       	brne	.-38     	; 0xb6e <__udivmodsi4_loop>
 b94:	60 95       	com	r22
 b96:	70 95       	com	r23
 b98:	80 95       	com	r24
 b9a:	90 95       	com	r25
 b9c:	9b 01       	movw	r18, r22
 b9e:	ac 01       	movw	r20, r24
 ba0:	bd 01       	movw	r22, r26
 ba2:	cf 01       	movw	r24, r30
 ba4:	08 95       	ret

00000ba6 <__tablejump2__>:
 ba6:	ee 0f       	add	r30, r30
 ba8:	ff 1f       	adc	r31, r31
 baa:	05 90       	lpm	r0, Z+
 bac:	f4 91       	lpm	r31, Z
 bae:	e0 2d       	mov	r30, r0
 bb0:	09 94       	ijmp

00000bb2 <_exit>:
 bb2:	f8 94       	cli

00000bb4 <__stop_program>:
 bb4:	ff cf       	rjmp	.-2      	; 0xbb4 <__stop_program>
